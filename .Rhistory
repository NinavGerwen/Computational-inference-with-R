setwd("C:/Users/nina-/Documents/GitHub/Computational-inference-with-R/")
gala_data <- read.csv(file = "gala.txt" ,sep = " ")
View(gala_data)
?lm
View(gala_data)
##
summary(lm(Species ~ Area + Elevation + Endemics, data = gala_data))
librar(tidyverse)
library(tidyverse)
## Perform the multiple regression through the lm() function and gain the
## correct statistics/estimates using the summary() function
regression_model <- lm(Species ~ Area + Elevation + Endemics, data = gala_data))
## Perform the multiple regression through the lm() function specifying the correct variables through the formula
## correct statistics/estimates using the summary() function
regression_model <- lm(Species ~ Area + Elevation + Endemics, data = gala_data)
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
View(regression_model)
plot(regression_model$residuals)
View(regression_model)
plot(regression_model$fitted.values, regression_model$residuals)
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
library(ggplot2)
library(ggplot2)
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals)) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals)) + geom_point()
ggplot(data = regression_model, aes(x = fitted.values, y = residuals)) + geom_point()
View(gala_data)
View(regression_model)
plot(regression_model$fitted.values, regression_model$residuals)
plot(regression_model$residuals, regression_model$fitted.values,)
plot(regression_model$fitted.values, regression_model$residuals)
Beta_Area <- t(gala_data$Area)
Beta_Area
Beta_Area <- t(gala_data$Area)%*%gala_data$Area
Beta_Area <- solve(t(gala_data$Area)%*%gala_data$Area)
Beta_Area
Beta_Area <- solve(t(gala_data$Area)%*%gala_data$Area) %*% t(gala_data$Area)
Beta_Area
Beta_Area <- solve(t(gala_data$Area) %*% gala_data$Area) %*% t(gala_data$Area) %*% gala_data$Species
Beta_Area
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
Beta_Area
gala_data[,1]
gala_data[,2:4]
Beta_Area <- solve(t(gala_data[,2:4]) %*% gala_data[,2:3])) %*% t(gala_data[,2:4]) %*% gala_data$Species
Beta_Area
Beta_Area <- solve(t(gala_data[,2:4]) %*% gala_data[,2:3]) %*% t(gala_data[,2:4]) %*% gala_data$Species
Beta_Area
Beta_Area <- solve(t(gala_data[,2:4]) %*% gala_data[,2:4]) %*% t(gala_data[,2:4]) %*% gala_data$Species
Beta_Area
Beta_Area <- solve(t(gala_data[,2:4]) %*% matrix(gala_data[,2:4])) %*% t(gala_data[,2:4]) %*% gala_data$Species
Beta_Area
Beta_Area <- solve(t(matrix(gala_data[,2:4])) %*% matrix(gala_data[,2:4])) %*% t(gala_data[,2:4]) %*% gala_data$Species
Beta_Area
Beta_Area <- solve(t(gala_data$Area) %*% gala_data$Area) %*% t(gala_data$Area) %*% gala_data$Species
Beta_Area
View(gala_data)
Beta_Area <- (solve(t(gala_data$Area) %*% gala_data$Area)) %*% t(gala_data$Area) %*% gala_data$Species
Beta_Area
gala_data$Area
matrix(gala_data$Area)
Area <- matrix(gala_data$Area)
Species <- matrix(gala_data$Species)
Beta_Area <- (solve(t(Area) %*% Area)) %*% t(Area) %*% gala_data$Species
Beta_Area
Species
Beta_Area <- (solve(t(Area) %*% Area)) %*% t(Area) %*% gala_data$Species
Beta_Area
Area <- matrix(gala_data[$Area],2:4)
Area <- matrix(gala_data[,2:4)
Area <- matrix(gala_data[,2:4))
Species <- matrix(gala_data$Species)
Species
## Question 3:
## First to specify the arguments:
## Most importantly, a dataset should be given as input
## Then from this dataset, the dependent variable (DV) should be specified (column x from the dataset)
## Then finally  independent variable(s) (IV) should be specified, we use ... because it can be any number of variables/columns
Regression_Function <- function(data = dataset, DV = dataset[, x], IV = dataset[, ...]) {
## text
}
Area <- matrix(gala_data[,2:4), ncol = 3)
Species <- matrix(gala_data$Species)
Species
## Question 3:
## First to specify the arguments:
## Most importantly, a dataset should be given as input
## Then from this dataset, the dependent variable (DV) should be specified (column x from the dataset)
## Then finally  independent variable(s) (IV) should be specified, we use ... because it can be any number of variables/columns
Regression_Function <- function(data = dataset, DV = dataset[, x], IV = dataset[, ...]) {
## text
}
Area <- matrix(gala_data[,2:4], ncol = 3)
Area
Area <- matrix(gala_data[,2:4])
Area
Area <- gala_data[,2:4]
Area
Beta_Area <- (solve(t(Area) %*% Area)) %*% t(Area) %*% gala_data$Species
Beta_Area
matrix(Area)
Beta_Area <- (solve(Area %*% t(Area))) %*% t(Area) %*% gala_data$Species
Beta_Area
Beta_Area <- (solve(gala_data$Area %*% t(gala_data$Area))) %*% t(gala_data$Area) %*% gala_data$Species
View(gala_data)
Beta_Area <- (solve(gala_data$Area %*% t(gala_data$Area))) %*% t(gala_data$Area) %*% gala_data$Species
Beta_Area <- (solve(t(gala_data$Area) %*% gala_data$Area)) %*% t(gala_data$Area) %*% gala_data$Species
Beta_Area
Beta_Area <- (ginv(t(gala_data$Area) %*% gala_data$Area)) %*% t(gala_data$Area) %*% gala_data$Species
Beta_Area
matrix(c(gala_data$Area, gala_data$Endemics, gala_data$Elevation))
matrix(c(gala_data$Area, gala_data$Endemics, gala_data$Elevation), ncol = 3, nrow = 30)
Beta_Area <- (solve(t(test) %*% test)) %*% t(test) %*% gala_data$Species
Beta_Area
test <- matrix(c(gala_data$Area, gala_data$Endemics, gala_data$Elevation), ncol = 3, nrow = 30)
Beta_Area <- (solve(t(test) %*% test)) %*% t(test) %*% gala_data$Species
Beta_Area
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
Beta_Area
test <- matrix(c(gala_data$Area, gala_data$Elevation, gala_data$Endemics), ncol = 3, nrow = 30)
Beta_Area <- (solve(t(test) %*% test)) %*% t(test) %*% gala_data$Species
Beta_Area
test
test2 <- matrix(gala_data$Species)
test2
Beta_Area <- (solve(t(test) %*% test)) %*% t(test) %*% test2
Beta_Area
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
IVs <- matrix(c(gala_data$Area, gala_data$Elevation, gala_data$Endemics), ncol = 3, nrow = 30)
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% test2)
Beta_Area
DV <- matrix(gala_data$Species, ncol = 1, nrow = 30)
IVs <- matrix(c(gala_data$Area, gala_data$Elevation, gala_data$Endemics), ncol = 3, nrow = 30)
rm(Area, Species)
rm(test, test2)
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% test2)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% DV
Beta_Area
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
?solve
?t
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% DV
Beta_Area
?lm
## Perform the multiple regression through the lm() function specifying the correct variables through the formula
regression_model <- lm(Species ~ Area + Elevation + Endemics, data = gala_data, weights = NULL)
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
## Perform the multiple regression through the lm() function specifying the correct variables through the formula
regression_model <- lm(Species ~ Area + Elevation + Endemics, data = gala_data)
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
Beta_Area <- (solve((t(IVs) %*% IVs))) %*% t(IVs) %*% DV
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% DV
Beta_Area
Beta_Area <- ((solve(t(IVs) %*% IVs))) %*% t(IVs) %*% DV
Beta_Area
View(regression_model)
?solve
## The regression coefficients:
t(IVs) %*% IVs
## The regression coefficients:
idk <- t(IVs) %*% IVs
solve(idk)
idk2 <- solve(idk)
idk2 %*% t(IVs) %*% DV
## The regression coefficients:
rm(idk, idk2)
View(gala_data)
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% mean(gala_data$Species)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% mean(gala_data$Species)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% DV
DV <- matrix(gala_data$Species, ncol = 1, nrow = 30)
DV
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% c(gala_data$Species)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% t(IVs) %*% DV
Beta_Area
DV
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
Beta_Area
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
## The regression coefficients:
t(IVs) %*% DV
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (IVs %*% DV)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (IVs %*% DV)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
Beta_Area
IVs <- matrix(c(gala_data$Area, gala_data$Elevation, gala_data$Endemics), ncol = 3, nrow = 30)
IVs
t(IVs)
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (IVs %*% DV)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
Beta_Area
t(IVs) %*% IVs
IVs %*% t(IVs)
step_1 <- t(IVs) %*% IVs
step_2 <- solve(step_1)
step_2
is.matrix(step_2)
step_3 <- t(IVs) %*% DV
step_3
IVs %*% DV
IVs %*% DV
IVs %*% DV
IVs <- matrix(c(gala_data$Area, gala_data$Elevation, gala_data$Endemics), ncol = 3, nrow = 30)
IVs
IVs %*% DV
IVs %*% DV
DV %*% IVs
is.matrix(step_3)
step_4 <- step_2 %*% step_3
step_4
?t
?solve
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV) + matrix(rep(-15.891237, 30), ncol = 1, nrow = 30)
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV) + matrix(rep(-15.891237, 30), ncol = 1, nrow = 30)
Beta_Area
matrix(rep(-15.891237, 30), ncol = 1, nrow = 30)
DV <- DV - 15.891237
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV) +
Beta_Area
matrix(rep(-15.891237, 30), ncol = 1, nrow = 30)
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV) +
Beta_Area
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV) +
Beta_Area
DV <- DV - 15.891237
DV
DV <- matrix(gala_data$Species, ncol = 1, nrow = 30)
DV <- DV - 15.891237
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV) +
Beta_Area
matrix(rep(-15.891237, 30), ncol = 1, nrow = 30)
DV
DV <- DV - 15.891237
DV <- DV - 15.891237
DV <- DV - 15.891237
DV <- matrix(gala_data$Species, ncol = 1, nrow = 30)
DV
DV <- DV - 15.891237
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
Beta_Area
DV <- matrix(gala_data$Species, ncol = 1, nrow = 30)
DV
DV <- DV - 15.891237
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
Beta_Area
rm(step_1, step_2, step_3, step_4)
Regression_Function <- function(data = dataset, DV = dataset[, x], IV = dataset[, ...]) {
## text
}
## For a t-test, someone should have two vectors as input, so the function should also ask for two vectors
myTtest <- function(x, y) {
## First, ask and define a few values necessary to calculate the t-test
n_x <- length(x)
n_y <- length(y)
## now, we  calculate the pooled sd through the following formula, using the built-in function var()
pooled_s <- sqrt(((n_x - 1)*(var(x)) + (n_y - 1)*(var(y)))/(n_x + n_y - 2))
## knowing the pooled_s, we can calculate the t-statistic through the final formula using the built-in function mean()
t_test <- (mean(x) - mean(y))/(pooled_s * sqrt((1/n_x)+(1/n_y)))
## Question 3:
## To get the p-value, we use the built-in function pt(), in this function, we need to define the t-statistic (gained above) and the degrees of freedom
## Furthermore, to get the correct p-value, we should make an if-statement, because:
if(t_test < 0) {
## if the t-value is below 0, it means we need to gain the p-value for the lower tail
p_value <- 2 * pt(t_test, df = n_x + n_y - 2, lower.tail = TRUE)
} else {
## if the t-value is above 0, it means we need to gain the p-value for the upper tail
p_value <- 2 * pt(t_test, df = n_x + n_y - 2, lower.tail = FALSE)
## Finally, in both cases the p-value should be multiplied by 2, because we are doing a two-tailed test
}
## Question 4:
## create a list of values that we wish to have as output
list_of_values <- list(t_test, p_value)
## return the list of values
return(list_of_values)
}
## To test whether the results match, create the two factors and run it with both t-tests
CSFI <- c(2,5,5,6,6,7,8,9)
TFI <- c(1,1,2,3,3,4,5,7,7,8)
t.test(CSFI, TFI, var.equal = TRUE)
myTtest(CSFI, TFI)
t.test(TFI, CSFI, var.equal = TRUE)
myTtest(TFI, CSFI)
View(gala_data)
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
Beta_Area
DV <- matrix(gala_data$Species, ncol = 1, nrow = 30)
DV
IVs <- matrix(c(gala_data$Area, gala_data$Elevation, gala_data$Endemics), ncol = 3, nrow = 30)
IVs
Beta_Area <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
Beta_Area
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
Beta_Area
View(gala_data)
View(regression_model)
## Perform the multiple regression through the lm() function specifying the correct variables through the formula
regression_model <- lm(Species ~ Area + Elevation + Endemics + 0, data = gala_data)
## Gain the correct statistics/estimates using the summary() function
summary(regression_model)
rm(Beta_Area)
b_coefficients <- (solve(t(IVs) %*% IVs)) %*% (t(IVs) %*% DV)
b_coefficients
## The predicted values:
predicted_values <- IVs %*% b_coefficients
predicted_values
View(regression_model)
predicted_values == regression_model$residuals
predicted_values == regression_model$fitted.values
predicted_values
## The residuals:
error_residuals <- DV - predicted_values
error_residuals
?lm
Regression_Function <- function(data, DV, IVs) {
## question: how to allow IV to be any number of things
}
Regression_Function()
## question: how to allow IV to be any number of things
return(DV)
Regression_Function <- function(data, DV, IVs) {
## question: how to allow IV to be any number of things
return(DV)
}
Regression_Function(
Regression_Function()
