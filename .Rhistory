?plot
x <- 1:10
x{-11}
x[-11]
x[-11]
x[0]
x <- 1:10 # this code creates a new value x, which is a list of integers ranging from 1 to 10
x <- 1:10 # this code creates a new value x, which is a list of integers ranging from 1 to 10
x[-11]
x <- 1:15   # this code creates a new value x, which is a list of integers ranging from 1 to 10
x[-11]      #
# it simply gives x
x[0]        #
x <- 5:10   # this code creates a new value x, which is a list of integers ranging from 1 to 10
# it simply gives x
x[0]        #
x <- 1:10   # this code creates a new value x, which is a list of integers ranging from 1 to 10
# it simply gives x
x[0]        #
# it simply gives x
x * [0]        #
# it simply gives x
x[0]        #
# it simply gives x
x[1]        #
# it simply gives x
x[]        #
# it simply gives x
x[5]        #
x[14]
x[-11]      # this gives x, which is a list ranging from 1 to 10 without the 11th element, however because x doesn't have 11 elements
?seq
A <- seq(1,5)
?rep
a <- seq(1, 5)
A <- rep(a, 5)
A
B <- rep(seq(1,5), 5)
A <- rep(seq(1,5), 5)
B <- seq(rep(1,5), 5)
?seq
B <- seq(1(rep, 5), 5)
B <- seq(1, 5)
?rep
C <- rep(B)
rm(C)
C <- rep(B, length.out = 5)
C <- rep(B, each= 5)
B <- rep(seq(1, 5), each = 5)
rm(C)
?matrix
a <- matrix(data = c(2, 5, 0)), nrow = 3, ncol = 1)
rm(a)
a <- matrix(data = c(2, 5, 0)), nrow = 3, ncol = 1)
?c
## Question 4
c(2,5,0)
## Question 4
a <- matrix(data = c(2, 5, 0), nrow = 3, ncol = 1)
View(a)
b <- matrix(data = c(-1, 0, 8), nrow = 3, ncol = 1)
View(b)
d <- matrix(data = c(12, 15, 10), nrow = 3, ncol = 1)
?cinbd
?cbind
M <- matrix(data = cbind(a, b, c), nrow = 3, ncol = 3)
View(M)
M <- matrix(data = cbind(a, b, d))
View(M)
M <- matrix(data = cbind(a, b, d), nrow = 3, ncol = 3)
View(M)
?array
## Question 6
array.A <- array(data = 1:18, dim = 3,2,3)
## Question 6
array.A <- array(data = 1:18, dim = c(3,2,3))
?dim
## Question 6
array.A <- array(data = 1:18, dim = c(3,2,3)
## Question 6
array.A <- array(data = 1:18, dim = c(3,2,3))
## Question 6
Array_A <- array(data = 1:18, dim = c(3,2,3))
rm(array.A)
## Question 6
Array_A <- array(1:18, dim = c(3,2,3))
## Question 6
Array_A <- array(1:15, dim = c(3,2,3))
## Question 6
Array_A <- array(1:18, dim = c(3,2,3))
print(Array_A)
print(Array_A)
#To select the element in the third row, first column and first slide:
Array_A[dim = 3,1,1]
# To select the elements in the second column of the second slide:
Array_A[dim = c(1,2,3), 2, 2]
#To select the element in the third row, first column and first slide:
Array_A[dim = 3, 1, 1]
# To select the elements in the second column of the second slide:
Array_A[dim = c(1:3), 2, 2]
library(MASS)
require(MASS)
attach(Animals)
## Exercise B
install.packages(MASS)
require(MASS)
attach("Animals")
attach(Animals)
require(MASS)
attach(Animals)
rm(list=(ls))
rm(list=(ls))
## Question 1
require(MASS)
attach(Animals)
?Animals
## Question 2
print(Animals)
dim(Animals)
Animals[dim(1,3)]
## Question 1
require(MASS)
attach(Animals)
## Question 2
dim(Animals)      ## the dataset has 28 rows and 2 columns, the rows represent different animals and
## the columns represent body (kg) and brain (g) weight
print(Animals)
Animals[dim(1,3)]
Animals[dim = 3, 1]
dataframe$Animals[dim = 3, 1]
dataset <- as.data.frame(Animals)
View(dataset)
dataset[dim = 3, 1]
dataset[dim = 1, 3]
dataset$Animals[dim = 3, 1]
dataset$Animals[dim = 1, 3]
dataset$Animals[dim = 1, 1]
levels(Animals)
levels(dataset$body)
dataset[dim = 1, 1]
dataset[dim = 1, 1]
dataset[dim = 1, 1]
levels(dataset$body)
levels(dataset$brain)
?levels
?dataset$body
dataset[1, 3]
dataset <- as.data.frame(Animals)
dataset[1, 3]
dataset[3, 1]
dataset[3,]
dataset[,2]
## Question 4
dotchart(log(body), row.names(Animals), xlab = "log(body)")
?sort.list
## Question 5
sortbody <- sort.list(body)
dotchart(log(body[sortbody]), row.names(Animals[sortbody,]), xlab = "log(body")
## Question 4
dotchart(log(body), row.names(Animals), xlab = "log(body)")
dotchart(log(body[sortbody]), row.names(Animals[sortbody,]), xlab = "log(body")
dotchart(log(brain[sortbrain]), row.names(Animals[sortbody,]), xlab = "log(body")
## Question 6
sortbrain <- sort.list(brain)
dotchart(log(brain[sortbrain]), row.names(Animals[sortbody,]), xlab = "log(body")
dotchart(log(brain[sortbrain]), row.names(Animals[sortbody,]), xlab = "log(brain)")
dotchart(log(body[sortbody]), row.names(Animals[sortbody,]), xlab = "log(body")
dotchart(log(brain[sortbrain]), row.names(Animals[sortbody,]), xlab = "log(brain)")
dotchart(log(body[sortbody]), row.names(Animals[sortbody,]), xlab = "log(body")
dotchart(log(brain[sortbrain]), row.names(Animals[sortbody,]), xlab = "log(brain)")
?sort
?sort.list
?dot.chart
?dotchart
?log
dotchart(log(brain[sortbrain]), row.names(Animals[sortbrain,]), xlab = "log(brain)")   # creating a dotchart of the natural logarithm of sorted brainweight
dotchart(log(body[sortbody]), row.names(Animals[sortbody,]), xlab = "log(body")
dotchart(log(brain[sortbrain]), row.names(Animals[sortbrain,]), xlab = "log(brain)")   # creating a dotchart of the natural logarithm of sorted brainweight
dotchart(log(body[sortbody]), row.names(Animals[sortbody,]), xlab = "log(body")
dotchart(log(brain[sortbrain]), row.names(Animals[sortbrain,]), xlab = "log(brain)")   # creating a dotchart of the natural logarithm of sorted brainweight
dotchart(log(body[sortbody]), row.names(Animals[sortbody,]), xlab = "log(body")
dotchart(log(brain[sortbrain]), row.names(Animals[sortbrain,]), xlab = "log(brain)")   # creating a dotchart of the natural logarithm of sorted brainweight
dotchart(log(brain), row.names(Animals))
dotchart(log(body), row.names(Animals), xlab = "log(body)")                     # following the code in the assignment
dotchart(log(brain), row.names(Animals))
?sort
?sort.list
sorted <- sort(brain)
rm(sorted)
dotchart(log(brain[sortbrain]), row.names(Animals[sortbrain,]), xlab = "log(brain)")  # creating a dotchart of the natural logarithm of sorted brainweight
attach(mammals)
dataset2 <- as.data.frame(mammals)
?rbind
all_animals <- rbind(dataset$body, dataset2$body)
View(all_animals)
View(dataset2)
all_animals <- rbind(Animals, mammals)
View(all_animals)
View(all_animals)
?duplicated
duplicated(all_animals)
final_dataset <- all_animals[-anyDuplicated(all_animals)]
View(final_dataset)
all_animals[-anyDuplicated(all_animals)]
all_animals[-duplicated(all_animals)]
all_animals[-duplicated(all_animals) = TRUE]
final_dataset <- all_animals[-duplicated(all_animals) = TRUE]
final_dataset <- all_animals[-v(duplicated(all_animals) = TRUE)]
final_dataset <- all_animals[-c(duplicated(all_animals) = TRUE)]
all_animals[-c(duplicated(all_animals) = TRUE)]
duplicated(all_animals)
all_animals[-c(duplicated(all_animals) = TRUE)]
all_animals[-duplicated(all_animals) = TRUE]
all_animals[-duplicated() = TRUE]
final_dataset <- all_animals[-duplicated() = TRUE]
final_dataset <- all_animals[-duplicated() = TRUE]
View(final_dataset)
?with
all_animals[-c(duplicated(all_animals) = TRUE)]
all_animals[-c(duplicated(all_animals) = TRUE),]
all_animals[!c(duplicated(all_animals) = TRUE),]
all_animals[,!c(duplicated(all_animals) = TRUE)]
duplicated(all_animals)
all_animals[!duplicated() = TRUE, 0
all_animals[!duplicated() = TRUE,]
all_animals[!duplicated(all_animals) = TRUE, ]
all_animals[!duplicated(all_animals), ]
final_dataset <- all_animals[!duplicated(all_animals), ]
View(final_dataset)
final_dataset <- all_animals[-duplicated(all_animals), ]
View(final_dataset)
final_dataset <- all_animals[-c(duplicated(all_animals)), ]
final_dataset <- all_animals[!duplicated(all_animals), ]
final_dataset <- all_animals[!duplicated(all_animals), ]      # create the final dataset, which consists of all elements in the combined dataset which are NOT (!) duplicated
?unique
unique(all_animals)
test <- unique(all_animals)
View(test)
?!
?!
!
!?
asdf
?unique
dettach(Animals)
detach(Animals)
detach(mammals)
