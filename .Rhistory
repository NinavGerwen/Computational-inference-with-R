## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function <- function(data, DV = matrix(data[, 1]), IV = data[, 2:ncol(data)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- apply(IV[,-1], 2, FUN = mean)
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function <- function(data, DV = matrix(data[, 1]), IV = data[, 2:ncol(data)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function <- function(data, DV = matrix(data[, 1]), IV = data[, 2:ncol(data)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
##IV_means <- as.matrix(apply(IV[,-1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
Regression_Function <- function(data, DV = matrix(data[, 1]), IV = data[, 2:ncol(data)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
##IV_means <- as.matrix(apply(IV[,-1], 2, FUN = mean))
##descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
##names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
gala_data[, 2:3]
Regression_Function <- function(data, DV = matrix(data[, 1]), IV = data[, -1]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Question 4:
gala_data2 <- gala_data[, 1:4]
Regression_Function(data = gala_data2)
gala_data[, -1]
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
View(gala_data2)
Regression_Function <- function(data, DV = matrix(data[, 1]), IV = matrix(data[, -1])) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
Regression_Function(data = gala_data2)
Regression_Function <- function(data, DV = data[, 1], IV = data[, -1]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Question 4:
gala_data2 <- gala_data[, 1:4]
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
gala_data[, -1]
gala_data
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function <- function(data, DV = data[, 1], IV = data[, -1]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(lapply(IV[,-1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
Regression_Function <- function(data, DV = data[, 1], IV = data[, -1]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
Regression_Function(data = gala_data2)
?lapply
is.null()
Regression_Function <- function(data, DV = data[, 1], IV = NULL) { ## question: how to allow IV to be any number of things
if(is.null(IV)) {
IV <- data[, -1] }
DV <- matrix(DV, nrow = nrow(data))
IV <- cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data)))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Question 4:
gala_data2 <- gala_data[, 1:4]
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function <- function(data, DV = data[, 1], IV = NULL) { ## question: how to allow IV to be any number of things
if(is.null(IV)) {
IV <- data[, -1] }
DV <- matrix(DV, nrow = nrow(data))
IV <- as.matrix(cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data))))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = gala_data[, -1])
Regression_Function <- function(data, DV = data[, 1], IV = data[, 2:4]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(data))
IV <- as.matrix(cbind(rep(1,nrow(data)), matrix(IV, nrow = nrow(data))))
## Descriptive statistics of data:
Sample_Size <- nrow(data)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Question 4:
gala_data2 <- gala_data[, 1:4]
Regression_Function(data = gala_data2)
data.class(gala_data[, -1])
gala_data
data.class(gala_data[, -1])
as.matrix(gala_data[, -1])
data.class(as.matrix(gala_data[, -1]))
Regression_Function <- function(dataset, DV = dataset[, 1], IV = dataset[, 2:ncol(dataset)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(dataset))
IV <- as.matrix(cbind(rep(1,nrow(dataset)), matrix(IV, nrow = nrow(dataset))))
## Descriptive statistics of data:
Sample_Size <- nrow(dataset)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Ex <- cbind(rep(1,30), gala_data[, -1])
View(Ex)
data.class((Ex))
?as.matrix
Ex <- cbind(rep(1,30), gala_data[, -1])
Ex <- as.matrix(cbind(rep(1,30), gala_data[, -1]))
View(Ex)
?mapply
str(gala_data[, -1])
Regression_Function <- function(dataset, DV = dataset[, 1], IV = dataset[, 2:ncol(dataset)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(dataset))
IV <- as.matrix(cbind(rep(1,nrow(dataset)), matrix(IV, nrow = nrow(dataset))))
## Descriptive statistics of data:
Sample_Size <- nrow(dataset)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Means of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
gala_data[, -1] %*% gala_data
str(gala_data[, -1])
data.class(gala_data[, -1])
as.matrix(gala_data[, -1]) %*% gala_data
as.matrix(gala_data[, -1]) %*% as.matrix(gala_data)
as.matrix(gala_data[, -1]) %*% as.matrix(gala_data[, -1])
as.matrix(gala_data[, -1]) %*% as.matrix(t(gala_data[, -1]))
Regression_Function <- function(dataset, DV = dataset[, 1], IV = dataset[, 2:ncol(dataset)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(dataset))
IV <- as.matrix(cbind(rep(1,nrow(dataset)), matrix(IV, nrow = nrow(dataset))))
## Descriptive statistics of data:
Sample_Size <- nrow(dataset)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Mean(s) of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
Regression_Function <- function(dataset, DV = dataset[, 1], IV = dataset[, 2:ncol(dataset)]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(dataset))
IV <- cbind(rep(1,nrow(dataset)), matrix(IV, nrow = nrow(dataset)))
IV <- as.matrix(IV)
## Descriptive statistics of data:
Sample_Size <- nrow(dataset)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Mean(s) of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
Regression_Function(data = gala_data2)
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function <- function(dataset, DV = dataset[, 1], IV = dataset[, -1]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(dataset))
IV <- cbind(rep(1,nrow(dataset)), matrix(IV, nrow = nrow(dataset)))
IV <- as.matrix(IV)
## Descriptive statistics of data:
Sample_Size <- nrow(dataset)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1, drop = FALSE], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Mean(s) of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function <- function(dataset, DV = dataset[, 1], IV = dataset[, -1]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(dataset))
IV <- cbind(rep(1,nrow(dataset)), matrix(IV, nrow = nrow(dataset)))
IV <- as.matrix(IV)
## Descriptive statistics of data:
Sample_Size <- nrow(dataset)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[,-1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Mean(s) of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function <- function(dataset, DV = dataset[, 1], IV = dataset[, -1]) { ## question: how to allow IV to be any number of things
DV <- matrix(DV, nrow = nrow(dataset))
IV <- cbind(rep(1,nrow(dataset)), matrix(IV, nrow = nrow(dataset)))
## Descriptive statistics of data:
Sample_Size <- nrow(dataset)
DV_mean <- mean(DV)
IV_means <- as.matrix(apply(IV[, -1], 2, FUN = mean))
descriptive_statistics <- list(Sample_Size, DV_mean, IV_means)
names(descriptive_statistics) <- c("Sample Size", "Mean of the Dependent Variable", "Mean(s) of the Independent Variable(s)")
## Regression coefficients, predicted values and residuals using matrix algebra:
model_coefficients  <- (solve(t(IV) %*% IV)) %*% (t(IV) %*% DV)
predicted_values <- IV %*% model_coefficients
error_residuals <- DV - predicted_values
## Simple plot of predicted values against the residuals:
simple_plot <- plot(predicted_values, error_residuals)
list_of_information <- list(descriptive_statistics, model_coefficients, simple_plot)
names(list_of_information) <- c("Descriptive statistics", "Regression coefficients",
"Simple plot of predicted values against the residuals")
## Finally, the function should return the created list that holds all information
return(list_of_information)
}
## Running the function on the tortoise dataset, the coefficients match
Regression_Function(data = gala_data, DV = gala_data$Species, IV = c(gala_data$Area, gala_data$Elevation, gala_data$Endemics))
Regression_Function(data = gala_data2)
Regression_Function(data = gala_data2)
Regression_Function(data = gala_data2)
rm(list=ls())
