all_animals[-duplicated(all_animals) = TRUE]
all_animals[-duplicated() = TRUE]
final_dataset <- all_animals[-duplicated() = TRUE]
final_dataset <- all_animals[-duplicated() = TRUE]
View(final_dataset)
?with
all_animals[-c(duplicated(all_animals) = TRUE)]
all_animals[-c(duplicated(all_animals) = TRUE),]
all_animals[!c(duplicated(all_animals) = TRUE),]
all_animals[,!c(duplicated(all_animals) = TRUE)]
duplicated(all_animals)
all_animals[!duplicated() = TRUE, 0
all_animals[!duplicated() = TRUE,]
all_animals[!duplicated(all_animals) = TRUE, ]
all_animals[!duplicated(all_animals), ]
final_dataset <- all_animals[!duplicated(all_animals), ]
View(final_dataset)
final_dataset <- all_animals[-duplicated(all_animals), ]
View(final_dataset)
final_dataset <- all_animals[-c(duplicated(all_animals)), ]
final_dataset <- all_animals[!duplicated(all_animals), ]
final_dataset <- all_animals[!duplicated(all_animals), ]      # create the final dataset, which consists of all elements in the combined dataset which are NOT (!) duplicated
?unique
unique(all_animals)
test <- unique(all_animals)
View(test)
?!
?!
!
!?
asdf
?unique
dettach(Animals)
detach(Animals)
detach(mammals)
load("C:/Users/nina-/Documents/GitHub/Computational-inference-with-R/ChildIQ.RData")
View(ChildData)
summary(ChildData)
dim(ChildData)
str(ChildData)
head(ChildData)
?head
View(ChildData)
?str
ChildData$mom.hs <- as.factor(ChildData$mom.hs)
str(ChildData)          # displays the internal structure of the data frame (whether the variables are numerical, integers, etc.)
plot(ChildData$mom.iq, ChildData$kid.score)
with(ChildData, plot(mom.iq, kid.score)
?with
?with
?with()
??with
??with.default
?with
?with.default
plot(ChildData$mom.iq, ChildData$kid.score)
plot(ChildData$mom.iq, ChildData$kid.score)
?plo
?plot
?ggplot2
#4.1:
# I loaded the Rdata file into my global workspace and then wrote this code, meaning I don't have to use attach() or with()
library(ggplot2)
?ggpl
?ggplot
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score))
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score))
summary(ChildData)      # gives numerical information (mean, median, range, etc.) on all variables
dim(ChildData)          # shows the number of observations and variables
str(ChildData)          # displays the internal structure of the data frame (whether the variables are numerical, integers, etc.)
head(ChildData)         # returns the first part of the data frame, the heading if you will
ChildData$mom.hs <- as.factor(ChildData$mom.hs)   # recode the variable mom.hs as a factor with 2 levels (0 for no, 1 for yes)
ggplot(data = ChildData, aes(x = , y = kid.score))
ggplot(data = ChildData, aes(x = ChildData$mom.iq, y = kid.score))
ggplot(data = ChildData, aes(x = ChildData$mom.iq, y = ChildData$kid.score))
plot(ChildData$mom.iq, ChildData$kid.score))
plot(ChildData$mom.iq, ChildData$kid.score)
?plot
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", col = "grey")
?with
with(ChildData, ggplot(data = ChildData, aes(x = mom.iq, y = kid.score)))
with(ChildData, ggplot(aes(x = mom.iq, y = kid.score)))
ggplot(data = ChildData,
aes(x = mom.iq, y = kid.score)))
ggplot(data = ChildData,
aes(x = mom.iq, y = kid.score))
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", points = "black", col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", col = "grey")
?points
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", points(circles)col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", points(circles), col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", points(circles), col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", points(""), col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", points("C"), col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", points(), col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 21, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", font = "bold", pch = 16, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", font = bold, pch = 16, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 21)
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 21, filled.contour())
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 21)
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, color = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey", color = "black")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey", color = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey")
plot(ChildData$mom.iq, ChildData$kid.score, xlab = "Child's IQ Score", ylab = "Mother's IQ Score", pch = 16, col = "grey")
load("ChildIQ.RData")
summary(ChildData)      # gives numerical information (mean, median, range, etc.) on all variables
#4.1:
# I loaded the Rdata file into my global workspace and then wrote this code, meaning I don't have to use attach() or with()
library(ggplot2)
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score))
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score)) + geom_point()
?ggplot
?geom_point
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score)) + geom_point()
?ggplot
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), xlab = "Mother's IQ Score") + geom_point()
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score)) + geom_point()
+ labs(x = "Mother's IQ Score")
labs(x = "Mother's IQ Score")
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score)) + geom_point()
labs(x = "Mother's IQ Score")
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "M")) + geom_point()
ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
childplot + labs(x = "Mother's IQ Score")
t
Childplot <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
childplot + labs(x = "Mother's IQ Score")
Childplot
childplot + labs(x = "Mother's IQ Score")
childplot <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
childplot <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
childplot + labs(x = "Mother's IQ Score")
rm(Childplot)
rm(childplot)
plot_a <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
plot_a + labs(x = "Mother's IQ Score")
plot_a + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_a <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
plot_a + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_a <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
plot_a + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
?geom_point
plot_b + ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_b + ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b + ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_a + ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_a + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_a + ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_a + ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_a + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_a <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point()
plot_a + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(aes(colour = "black", fill = "grey"))
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(colour = "black", fill = "grey")
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(fill = "grey")
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(colour = "black")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(colour = "red")
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(shape = 16, colour = "red")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(shape = 16, colour = "red", fill = "grey")
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(shape = 16, colour = "black", fill = "grey")
plot_b + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) + geom_point(shape = 16, colour = "black", fill = "grey")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score"))
+ geom_point(shape = 16, colour = "black", fill = "grey")
+ labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score"))
#4.4:
{
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score"))
+ geom_point(shape = 16, colour = "black", fill = "grey")
+ labs(x = "Mother's IQ Score", y = "Child's IQ Score")
}
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score"))
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score"))
+ geom_point(shape = 16, colour = "black", fill = "grey",)
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 16, colour = "black", fill = "grey",)
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 16, colour = "black", fill = "grey",) + labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 16, colour = "black", fill = "grey", size = 1, stroke = 5) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 5, stroke = 5) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "white", size = 10, stroke = 5) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "white", size = 10, stroke = 5)
plot_b
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "white", size = 10, stroke = 5) +labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "white", size = 1, stroke = 2) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "white", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b
plot_a <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score)) + geom_point()
plot_a <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score)) + geom_point() +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_a
plot_b <- ggplot(data = ChildData, aes(x = mom.iq, y = kid.score), labs(x = "Mother's IQ Score")) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_b
plot_c <- (ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_c <- (ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_c <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score")
plot_c
?abline
?geom_abline
#4.5:
coef(lm(kid.score ~ mom.iq, data = ChildData))
plot_c <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746)
plot_c
plot_c <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746, colour = "blue")
plot_c
plot_c <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746, colour = "blue", size = 2)
plot_c <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746, colour = "blue", size = 1111)
plot_c
plot_c <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746, colour = "blue", size = 10)
plot_c
plot_c <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746)
plot_c
?geom_abline
plot_final <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746, colour = "blue", size = 5)
plot_final
plot_final <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746, colour = "blue", size = 3)
plot_final
plot_final <- ggplot(ChildData, aes(mom.iq, kid.score)) +
geom_point(shape = 21, colour = "black", fill = "grey", size = 1, stroke = 1) +
labs(x = "Mother's IQ Score", y = "Child's IQ Score") +
geom_abline(intercept = 25.7997778, slope = 0.6099746, colour = "blue", size = 2)
plot_final
?all.equal
?rnorm
rnorm(5, 5, 1.2)
rnorm(100, 2, 1.2)
?for
for (variable in vector) {
}
?for()
?for(){}
setwd("C:/Users/nina-/Documents/Master/Computational inference with R/")
SamplingMeanNorm <- function(mu, sigma, numsim){
# create memory for the sampled values for the three different sample sizes
mean5 <- rep(0,numsim)
mean100 <- rep(0,numsim)
mean10000 <- rep(0,numsim)
# fill in the missing part here
# use rnorm (for n, with mean and sd, give n values)
# and for loop
for(i in 1:numsim) {
mean5 <- rnorm(5, mu, sigma)
mean100 <- rnorm(100, mu, sigma)
mean10000 <- rnorm(10000, mu, sigma)
}
# store the output in a list (separate elements of the list
# can be called with $ sign.)
list(mean5=mean5, mean100=mean100, mean10000=mean10000)
# Makes a boxplot of the three different sample sizes: 5, 100, 1000.
boxplot(mean5,mean100,mean10000,
names=c("n=5","n=100","n=10000"))
title("Distribution of means from Normal distribution")
}
SamplingMeanNorm(2, 1.2, 1000)
SamplingMeanNorm <- function(mu, sigma, numsim){
# create memory for the sampled values for the three different sample sizes
mean5 <- rep(0,numsim)
mean100 <- rep(0,numsim)
mean10000 <- rep(0,numsim)
# fill in the missing part here
# use rnorm (for n, with mean and sd, give n values)
# and for loop
for(i in 1:numsim) {
X <- rnorm(5, mu, sigma)
Y <- rnorm(100, mu, sigma)
Z <- rnorm(10000, mu, sigma)
# now calculate the mean of these 3 things
# add that mean to respectively mean5/100/100000
mean5 <- mean(X)
mean100 <- mean(Y)
mean10000 <- mean(Z)
}
# store the output in a list (separate elements of the list
# can be called with $ sign.)
list(mean5=mean5, mean100=mean100, mean10000=mean10000)
# Makes a boxplot of the three different sample sizes: 5, 100, 1000.
boxplot(mean5,mean100,mean10000,
names=c("n=5","n=100","n=10000"))
title("Distribution of means from Normal distribution")
}
SamplingMeanNorm(2, 1.2, 1000)
SamplingMeanNorm <- function(mu, sigma, numsim){
# create memory for the sampled values for the three different sample sizes
mean5 <- rep(0,numsim)
mean100 <- rep(0,numsim)
mean10000 <- rep(0,numsim)
# fill in the missing part here
# use rnorm (for n, with mean and sd, give n values)
# and for loop
for(i in 1:numsim) {
X <- rnorm(5, mu, sigma)
Y <- rnorm(100, mu, sigma)
Z <- rnorm(10000, mu, sigma)
# now calculate the mean of these 3 things
# add that mean to respectively mean5/100/100000
mean5[i] <- mean(X)
mean100[i] <- mean(Y)
mean10000[i] <- mean(Z)
}
# store the output in a list (separate elements of the list
# can be called with $ sign.)
list(mean5=mean5, mean100=mean100, mean10000=mean10000)
# Makes a boxplot of the three different sample sizes: 5, 100, 1000.
boxplot(mean5,mean100,mean10000,
names=c("n=5","n=100","n=10000"))
title("Distribution of means from Normal distribution")
}
SamplingMeanNorm(2, 1.2, 1000)
title("Distribution of Means from Normal Distribution")
SamplingMeanNorm <- function(mu, sigma, numsim){
# create memory for the sampled values for the three different sample sizes
mean5 <- rep(0,numsim)
mean100 <- rep(0,numsim)
mean10000 <- rep(0,numsim)
# fill in the missing part here
# use rnorm (for n, with mean and sd, give n values)
# and for loop
for(i in 1:numsim) {
X <- rnorm(5, mu, sigma)
Y <- rnorm(100, mu, sigma)
Z <- rnorm(10000, mu, sigma)
# now calculate the mean of these 3 things
# add that mean to respectively mean5/100/100000
mean5[i] <- mean(X)
mean100[i] <- mean(Y)
mean10000[i] <- mean(Z)
}
# store the output in a list (separate elements of the list
# can be called with $ sign.)
list(mean5=mean5, mean100=mean100, mean10000=mean10000)
# Makes a boxplot of the three different sample sizes: 5, 100, 1000.
boxplot(mean5,mean100,mean10000,
names=c("n=5","n=100","n=10000"))
title("Distribution of Means from Normal Distribution")
}
mean5
SamplingMeanNorm(100, 15, 30)
SamplingMeanNorm(2, 1.2, 1000)
SamplingMeanNorm(2, 1.2, 1000)
SamplingMeanNorm(2, 1.2, 1000)
X = 5
Y = 2
(X + Y)/2
rm(list=())
rm(X, Y)
ComputeMedian(example.data)
example.data <- matrix(c(2,5,14,23,18,9,11), nrow=7, ncol=1)
data.problem <- matrix(c(1:8), 8, 1)
ComputeAllMedians <- function(data){
n <- length(data)
sorted.data <- sort(data)
if(n %% 2 != 0) {
median.value <- sorted.data[(n+1)/2]
list(median.value = median.value)
} else {
two.middle.elements <- sorted.data[c((n)/2, ((n)/2)+1)]
median.value <- two.middle.elements/2
list(median.value = median.value)
}
}
ComputeAllMedians(data.problem)
ComputeAllMedians <- function(data){
n <- length(data)
sorted.data <- sort(data)
if(n %% 2 != 0) {
median.value <- sorted.data[(n+1)/2]
list(median.value = median.value)
} else {
two.middle.elements <- sorted.data[c((n)/2, ((n)/2)+1)]
median.value <- (two.middle.elements)/2
list(median.value = median.value)
}
}
ComputeAllMedians(data.problem)
sum.two.middle.elements <- sum(sorted.data[c((n)/2, ((n)/2)+1)])
ComputeAllMedians <- function(data){
n <- length(data)
sorted.data <- sort(data)
if(n %% 2 != 0) {
median.value <- sorted.data[(n+1)/2]
list(median.value = median.value)
} else {
sum.two.middle.elements <- sum(sorted.data[c((n)/2, ((n)/2)+1)])
median.value <- (two.middle.elements)/2
list(median.value = median.value)
}
}
ComputeAllMedians(data.problem)
median.value <- sum.two.middle.elements/2
ComputeAllMedians <- function(data){
n <- length(data)
sorted.data <- sort(data)
if(n %% 2 != 0) {
median.value <- sorted.data[(n+1)/2]
list(median.value = median.value)
} else {
sum.two.middle.elements <- sum(sorted.data[c((n)/2, ((n)/2)+1)])
median.value <- sum.two.middle.elements/2
list(median.value = median.value)
}
}
ComputeAllMedians(data.problem)
ComputeAllMedians(example.data)
View(example.data)
ComputeAllMedians(c(1:10))
ComputeAllMedians(c(1:9))
median(data.problem)
# Now the function works for both odd and even numbered vectors!
ComputeAllMedians(data.problem) == median(data.problem)
ComputeAllMedians(example.data) == median(example.data)
# Now the function works for both odd and even numbered vectors!
ComputeAllMedians(data.problem) == median(data.problem)
ComputeAllMedians(example.data) == median(example.data)
?median
setwd("C:/Users/nina-/Documents/Master/Computational inference with R/")
SamplingMeanNorm <- function(mu, sigma, numsim){
# create memory for the sampled values for the three different sample sizes
mean5 <- rep(0,numsim)
mean100 <- rep(0,numsim)
mean10000 <- rep(0,numsim)
# create a for loop in which a variable i loops a total of 'numsim' times (which the user can specify)
for(i in 1:numsim) {
X <- rnorm(5, mu, sigma)        # create three new vectors that take respectively 5/100/100000 random values
Y <- rnorm(100, mu, sigma)      # from a normal probability with the mean and standard deviation
Z <- rnorm(10000, mu, sigma)    # specified by the user through rnorm()
# The next step is to calculate the mean of those three variables
# and add them to the correct memory base on the ith element
mean5[i] <- mean(X)
mean100[i] <- mean(Y)
mean10000[i] <- mean(Z)
}
# store the output in a list (separate elements of the list
# can be called with $ sign.)
list(mean5=mean5, mean100=mean100, mean10000=mean10000)
# Makes a boxplot of the three different sample sizes: 5, 100, 1000.
boxplot(mean5,mean100,mean10000,
names=c("n=5","n=100","n=10000"))
title("Distribution of Means from Normal Distribution")
}
SamplingMeanNorm(2, 1.2, 1000)
